// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String  @unique
  setUpComplete Boolean
  role          String

  // fitnessInfo
  weight       Float?
  height       Float?
  bodyFat      Float?
  userActivity String?
  sex          String?

  // userSettings
  dateOfBirth     String?
  timezone        String?
  preferredTheme  String?
  preferredMetric String?
  googleId        String?
  displayName     String?

  // general
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  //Relations
  nutritionLogs         NutritionLog[]
  nutritionLogTemplates NutritionLogTemplate[]
  products              Product[]
  sessions              Session[]
  exercsiseLogs         ExercsiseLog[]
  meals                 Meal[]
  exercises             Exercise[]
  programs              Programs[]
}

model Exercise {
  id                  Int       @id @default(autoincrement())
  exerciseName        String
  exerciseType        String
  exerciseDescription String
  equipmentType       String
  mechanicType        String
  isExercisePublic    Boolean
  frontMuscles        String[]
  backMuscles         String[]
  instructions        String
  createdAt           DateTime? @default(now())
  updatedAt           DateTime?

  //Relations
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  ExercsiseLogs ExercsiseLog[]
  Session       Session?       @relation(fields: [sessionId], references: [id])
  sessionId     Int?
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  brand           String
  calories        Float
  carbs           Float
  fat             Float
  protein         Float
  dietType        String
  measurementType String
  productType     String
  servingSize     Float
  servings        Float
  amazonAffiliate String?

  //General
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  //Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Meal {
  id       Int    @id @default(autoincrement())
  products Json[]
  name     String

  //Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model NutritionLog {
  id Int @id @default(autoincrement())

  loggedMeals Json[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?

  //Relations
  template               NutritionLogTemplate @relation(fields: [nutritionLogTemplateId], references: [id])
  nutritionLogTemplateId Int                  @unique
  user                   User                 @relation(fields: [userId], references: [id])
  userId                 Int
}

model NutritionLogTemplate {
  id                Int           @id @default(autoincrement())
  nutritionLog      NutritionLog?
  templateStructure Json[]

  //Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model ExercsiseLog {
  id        Int       @id @default(autoincrement())
  logType   String
  reps      Int
  weight    Float
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  // Relations
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  Session    Session? @relation(fields: [sessionId], references: [id])
  sessionId  Int?
}

model Session {
  id         Int       @id @default(autoincrement())
  inProgress Boolean   @default(true)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?

  //Relations
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?
  exercises    Exercise[]
  exerciseLogs ExercsiseLog[]
}

model Programs {
  id   Int    @id @default(autoincrement())
  name String

  //Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

enum PaidStatus {
  PAID
  UNPAID
  PENDING
}
