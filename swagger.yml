openapi: 3.0.1
info:
  title: Payment Billing System API
  description: This is the API for the payment processing app
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://8bj7sy5w0b.execute-api.us-east-1.amazonaws.com/dev/
  - url: http://localhost:3007/dev/
tags:
  - name: Merchants
    description: Merchants for the site
  - name: Orders
    description: Endpoints dealing with orders
  - name: Auth
    description: Endpoints dealing with Authentication
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: PayPal
    description: Endpoint for handling paypal
paths:
  /merchant/settings:
    put:
      security:
        - authCookie: []
      tags:
        - Merchants
      summary: Update an existing Merchant
      operationId: updateSettings
      requestBody:
        description: Updating an existing merchant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantSettingsReq'
        required: true
      responses:
        200:
          description: successful call
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Merchant'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /merchant:
    get:
      tags:
        - Merchants
      summary: Finds merchant with http cookie passed
      description: Multiple status values can be provided with comma separated strings
      operationId: getMerchant
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Merchant'
        400:
          description: Invalid status value
          content: {}
      security:
        - authCookie: []

  /merchant/uploadImage:
    post:
      tags:
        - Merchants
      summary: uploads an image to s3
      operationId: uploadPhoto
      security:
        - authCookie: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Merchant'
  /merchant/order-overview:
    get:
      parameters:
        - name: filter
          in: query
          description: ID of order to delete
          required: true
          schema:
            type: string
            enum:
              - year
              - month
              - day
      tags:
        - Merchants
      summary: Returns aggregate of order data
      security:
        - authCookie: []
      operationId: getOrderOverview
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/orderOverview'

  # --Chart and widget of balances owed
  # --Chart and widget of total collected
  # --Chart and widget of total number of orders
  # --Chart and widget of completed payments
  # --Chart and widget of past due payments
  /orders/order:
    get:
      parameters:
        - name: email
          in: query
          description: Email
          required: true
          schema:
            type: string
        - name: merchantId
          in: query
          description: merchantId
          required: true
          schema:
            type: string
      tags:
        - Orders
      security:
        - authCookie: []
      summary: Get an Order
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: getOrder
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
  /orders:
    get:
      tags:
        - Orders
      summary: get all orders from merchant id
      description: Returns a map of status codes to quantities
      operationId: getOrders
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
      security:
        - authCookie: []
    post:
      tags:
        - Orders
      summary: Create new Orders
      operationId: createOrders
      requestBody:
        description: order placed for purchasing the pet
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrderReqBody'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      security:
        - authCookie: []
    delete:
      security:
        - authCookie: []
      tags:
        - Orders
      summary: Delete orders
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrders
      requestBody:
        description: order placed for purchasing the pet
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DeleteOrdersReq'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        401:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUnauthorized'
        500:
          description: serverError
          content:
            applilcation/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /orders/{orderId}:
    put:
      parameters:
        - name: orderId
          in: path
          description: ID of order to update
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Orders
      security:
        - authCookie: []
      summary: Update Order
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: updateOrder
      requestBody:
        description: Updating an existing merchant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderReq'
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
  /auth/sign-in:
    post:
      tags:
        - Auth
      summary: Sign in exsiting user
      description: Sign in existing user
      operationId: loginMerchant
      requestBody:
        description: Updating an existing merchant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpReqBody'
      responses:
        default:
          description: successful operation
          content: {}
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Merchant'
        401:
          description: user not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ServerError'
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ServerError'
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change existing password for user
      description: change existing password for user
      operationId: changePassword
      security:
        - authCookie: []
      requestBody:
        description: changing password for user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordReqBody'
      responses:
        default:
          description: successful operation
          content: {}
        201:
          description: successful response
  /auth/sign-up:
    post:
      tags:
        - Auth
      summary: Create new user
      description: Create new user
      operationId: createMerchant
      requestBody:
        description: Updating an existing merchant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpReqBody'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Merchant'
  /paypal/get-merchant-token:
    post:
      tags:
        - PayPal
      summary: Token Validation
      description: Endpoint to validate token
      security:
        - authCookie: []
      operationId: getMerchantPaypalToken
      responses:
        default:
          description: successful operation
          content: {}
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /paypal/get-seller-credentials:
    post:
      parameters:
        - name: paypalAuthCode
          in: header
          description: ID of order to update
          required: true
          schema:
            type: string
        - name: paypalSharedId
          in: header
          description: ID of order to update
          required: true
          schema:
            type: string
      security:
        - authCookie: []
      tags:
        - PayPal
      summary: Token Validation
      description: Endpoint to validate token
      operationId: getMerchantSellerPaypalCredentials
      responses:
        default:
          description: successful operation
          content: {}
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /paypal/save-seller-info:
    post:
      tags:
        - PayPal
      summary: Save Seller Info
      description: Endpoint to validate token
      operationId: saveSellerInfo
      security:
        - authCookie: []
      requestBody:
        description: Updating an existing merchant
        content:
          application/json:
            schema:
              type: object
              properties:
                merchantIdInPayPal:
                  type: string
      responses:
        default:
          description: successful operation
          content: {}
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Merchant'
  /paypal/update-order-status:
    post:
      tags:
        - PayPal
      summary: Save Seller Info
      description: Endpoint to validate token
      operationId: updateOrderStatus
      security:
        - authCookie: []
      requestBody:
        description: Updating an existing merchant
        content:
          application/json:
            schema:
              type: object
              properties:
                paypalOrderId:
                  type: string
                orderId:
                  type: number
      responses:
        default:
          description: successful operation
          content: {}
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                      data:
                        type: object
  /paypal/generate-link:
    post:
      tags:
        - PayPal
      summary: Generate paypal link
      description: Endpoint to validate token
      operationId: generatePaypalSignUpLink
      security:
        - authCookie: []
      responses:
        default:
          description: successful operation
          content: {}
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/GenerateLink'
components:
  schemas:
    DeleteOrdersReq:
      type: array
      items:
        type: number
        example: someOrderId
    GenerateLink:
      type: array
      items:
        type: object
        properties:
          href:
            type: string
            format: url
          rel:
            type: string
            enum:
              - action_url
              - self
          method:
            type: string
            enum:
              - GET
          description:
            type: string
    SignUpReqBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        businessName:
          type: string
        phoneNumber:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    orderOverview:
      type: object
      properties:
        completedPayments:
          $ref: '#/components/schemas/OrderOverviewData'
        pastDuePayments:
          $ref: '#/components/schemas/OrderOverviewData'
        totalNumberOfOrders:
          $ref: '#/components/schemas/OrderOverviewData'
        totalNumberOfCompletedPayments:
          $ref: '#/components/schemas/OrderOverviewData'
        totalNumberOfPastDuePayments:
          $ref: '#/components/schemas/OrderOverviewData'
    OrderOverviewDateShape:
      type: object
      properties:
        date:
          type: string
          format: date
        value:
          type: integer
    # First name, Last name, email, unique ID, Balance owed, balance paid, status (Paid, Unpaid), due date, merchant id
    ServerError:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          example: null
        reason:
          type: object
          properties:
            reasonCode:
              type: string
              example: 'SERVER_ERROR'
            reasonDescription:
              type: string
              example: 'Some server error message'
    UserUnauthorized:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          example: null
        reason:
          type: object
          properties:
            reasonCode:
              type: string
              example: 'USER_UNAUTHORIZED'
            reasonString:
              type: string
              example: 'User is unauthorized'
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: '12345'
        firstName:
          type: string
          example: 'FirstName'
        lastName:
          type: string
          example: 'LastName'
        email:
          type: string
          example: 'example@example.com'
        balanceOwed:
          type: integer
          example: 500.00
        balancePaid:
          type: integer
          example: 500.00
        status:
          type: string
          example: 'PAID'
          enum:
            - PAID
            - UNPAID
            - PENDING
        dueDate:
          type: string
          example: '2020-12-1'
          format: date
        datePaid:
          type: string
          format: date
        merchantId:
          type: integer
          format: int64
          example: '12345'
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    ChangePasswordReqBody:
      type: object
      properties:
        password:
          type: string
    OrderReqBody:
      type: array
      items:
        type: object
        properties:
          firstName:
            type: string
            example: 'FirstName'
          lastName:
            type: string
            example: 'LastName'
          email:
            type: string
            example: 'example@example.com'
          balanceOwed:
            type: integer
            example: 500.00
          balancePaid:
            type: integer
            example: 500.00
          status:
            type: string
            example: 'PAID'
            enum:
              - PAID
              - PENDING
              - UNPAID
          dueDate:
            type: string
            format: date
    # Business name, email, address, Custom Checkout URL (For Order Use), Payment Method Link (PayPal Connect)
    OrderOverviewData:
      properties:
        value:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderOverviewDateShape'
    Merchant:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: '12345'
        businessName:
          type: string
          example: 'DanzerPress'
        email:
          type: string
          format: email
          example: 'example@example.com'
        password:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
          example: '1400 example street'
        photo:
          type: string
          example: 's3://example'
        checkoutUrl:
          type: string
          example: 'custom-link'
        merchantIdInPayPal:
          type: string
          example: '12355'
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    UpdateOrderReq:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dueDate:
          type: string
          format: date
        status:
          type: string
          example: PAID
          enum:
            - PAID
            - UNPAID
            - PENDING
        balanceOwed:
          type: integer
        balancePaid:
          type: integer
    MerchantSettingsReq:
      type: object
      properties:
        email:
          type: string
        businessName:
          type: string
        address:
          type: string
        checkoutUrl:
          type: string
        phoneNumber:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    authCookie:
      type: apiKey
      name: authCookie
      in: cookie
